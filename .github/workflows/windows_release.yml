name: Windows Release

on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   5.15.2
  ARTIFACT:     qt-planets-build.zip

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qt3d
          setup-python: false

      - name: Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
          7z x jom.zip -ojom

      - name: Create build directory
        run:  mkdir ${{ runner.temp }}\build

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Build
        working-directory: ${{ runner.temp }}\build
        run:  |
          qmake -r ${{ env.SOURCE_DIR }}\planets-qml.pro
          ${{ runner.temp }}\jom\jom -j2
          cd release
          windeployqt --qmldir ${{ env.SOURCE_DIR }} planets-qml.exe --pdb --release --compiler-runtime
          copy C:\Windows\System32\concrt140.dll . 
          copy C:\Windows\System32\vccorlib140.dll .
          copy C:\Windows\System32\msvcp140.dll .
          copy C:\Windows\System32\vcruntime140.dll .

      - name: Zip build
        working-directory: ${{ runner.temp }}
        run:  |
          7z a qt-planets-build.zip ${{ runner.temp }}\build\* -r

      - name: Save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}\${{ env.ARTIFACT }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ runner.temp }}\${{ env.ARTIFACT }}
          asset_name: ${{ env.ARTIFACT }}
          asset_content_type: application/zip
          